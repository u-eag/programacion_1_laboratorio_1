***** Clase 1 - prog1 *****

Tipos de datos y máscaras:
int: %i / %d
float: %f / con 2 decimales: %.2f
char: %c

int x=10;
printf("%d",x);

int numero; //al número lo ingresa el usuario
scanf("%d",&numero);

Para castear un entero a flotante: (float)x

***** Clase 2 - lab1 *****

-ejercicio: mostrar números del 1 al 10 con while

    int i;

    i=0;

    while(i<10){
        printf("%d\n",(i+1));
        i++;
    }

    return 0;

-ejercicio: mostrar números del 1 al 10 con do while

    int i;

    i=0;

    do{
        i++;
        printf("%d\n",i);
    }while(i<10);

    return 0;

-ejercicio: mostrar números del 1 al 10 con for

    int i;
    for (i=0; i<10; i++){
        printf("%d\n",(i+1));
    }

    return 0;
    
-ejercicio: hacer un switch que de 0 a 6 diga "a dormir", de 7 a 9 "buenos días" y de 10 a 23 otra cosa
hacerlo con int y con char del 0 al 9

    int hora;
    char horaChar;

    printf("Ingrese una hora de 0 a 24: ");
    scanf("%d",&hora);

    switch(hora){
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
            printf("A dormir\n");
            break;
        case 7:
        case 8:
        case 9:
            printf("Buenos dias\n");
            break;
        default:
            printf("De 10 a 23\n");

    }

    printf("Ingrese una hora de 0 a 9: ");
    // antes de que el usuario ingrese el char, hay que iniciar el buffer
    fflush(stdin); //esta funciòn limpia el buffer en microsoft, en linux es: setbuf(NULL,stdin)
    scanf("%c",&horaChar);

    switch(horaChar){
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
            printf("A dormir\n");
            break;
        case '7':
        case '8':
            printf("Buenos dias\n");
            break;
        default:
            printf("el 9 es default\n");
    }

    return 0;

-ejemplo de maximo y minimo:

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
//ctype toupper/tolower
int main()
{
    int valor, min, max, flag=0;
    char rta;

    do{
        printf("Ingrese un valor: ");
        scanf("%d",&valor);

        if(flag==0||valor>max){
            max=valor;
        }
        if(flag==0||valor<min){
            min=valor;
            flag=1;
        }
        do{
            printf("Continuar[S/N]: ");
            fflush(stdin);
            scanf("%c",&rta);
            rta=toupper(rta);
        }while(!(rta=='S'||rta=='N'));
    }while(rta=='S');

    printf("El maximo es: %d \nEl minimo es %d",max,min);

    return 0;
}

***** Clase 3 - prog1 *****

Para crear funciones existen 4 prototipos:

1: Retorno nombreFuncion (Recibe)
2: No Retorno nombreFuncion (Recibe)
3: Retorno nombreFuncion (No Recibe)
4: No Retorno nombreFuncion (No Recibe)

Las variables en el prototipo de la función se llaman "formales" y en el main se llaman "actuales".

- Ejercicio: crear una función que obtenga el máximo entre 3 números

#include <stdio.h>
#include <stdlib.h>

int obtenerMaximo (int x, int y, int z);

int main()
{
    printf("%d\n\n",obtenerMaximo(1,2,3));
    return 0;
}

int obtenerMaximo (int x, int y, int z)
{
    int maximo;

    if (x>y){
        if (x>z){
            maximo = x;
        }
    } else if (y>z){
        maximo = y;
    } else {
        maximo = z;
    }
    
    return maximo;
}

Para generar una librería de funciones: crear un archivo .c (donde va a estar el desarrollo de las funciones) y otro.h (donde van a estar los prototipos de las funciones).

Para cargar una librería en un proyecto de codeblocks: agregar los archivos .c y .h en la carpeta del proyecto, después desde el árbol de codebloks hacer click derecho en el nombre del proyecto / add files / agregar el .c y el .h

***** Clase 4 - lab1 *****

- Diferencia entre trabajar con valores y trabajar con referencia (punteros):

#include <stdio.h>
#include <stdlib.h>

void muestra (int *x, int y);

int main()
{
    int x;
    int y;

    printf("Ingrese x: ");
    scanf("%d",&x);

    printf("Ingrese y: ");
    scanf("%d",&y);

    muestra(&x,y);
    printf("x: %d y: %d\n", x, y);

    return 0;
}

void muestra (int *x, int y){
*x=y;
printf("x: %d y: %d\n", *x, y);
}

- Reportar github: https://github.com/u-eag/tp_laboratorio_1.git

- Función recursiva: cuando desde la función se llama a la función. No es una buena práctica usarlas.

Un ejemplo de función recursiva es el factorial:
#include <stdio.h>
int factorial(int );
void main(void)
{
int valor,result;
printf("\nIngrese numero:");
scanf("%d",&valor);
result=factorial(valor);
printf("\nEl factorial de %d es %d",valor,result);
}
int factorial(int n)
{
int resp;
if(n==1)
return 1;
resp=n* factorial(n-1);
return (resp);
}

***** Clase 5 - prog1 *****

- Un puntero es una variable que guarda una dirección de memoria de otra variable. Puede ser int*, char* o float*.

    int x = 5;
    int* puntero;
    
    puntero = &x;
    
    *puntero = 23;
   
"puntero" solo: guarda la dirección de memoria de la variable que quiero (x).
"*puntero": cambia el valor de la variable que tengo en la agenda de memoria (x cambia de 5 a 23).

- Ejercicio: pedir 5 numeros, mostrar la suma y el promedio (con array)

    int cantidad=5;
    int vec[cantidad];
    int acumuladorSuma=0;
    float promedio;

    for(int i=0; i<cantidad; i++){
        printf("Ingrese un número: ");
        scanf("%d", &vec[i]);
        acumuladorSuma+=vec[i];
    }

    for(int i=0; i<cantidad; i++){
        acumuladorSuma+=vec[i];
    }

    promedio = (float)acumuladorSuma / cantidad;

    printf("\nLa suma de los numeros ingresados es: %d y el promedio es: %.2f\n", acumuladorSuma, promedio);
    
 TIP: para que CodeBlocks compile con la variable i declarada adentro de la condición del for: 
 ir a Settings/Compiler/ y tildar la 4ta opción "Have gcc follow the  1999 ISO  language standard [-std=c99]"
 y a partir de eso ya anda el for(int i=0; i<cantidad; i++){
 
 ***** Clase 6 - lab1 *****
 
 - leer apunte del campus: clase 4 / input
 
 - ejercicio: ordenar 5 números de menor a mayor
#include <stdio.h>
#include <stdlib.h>
#define CANT 5

int main()
{
    int vec[CANT]={7,5,6,2,8};
    int aux;

    for (int i=0; i<CANT-1; i++) {

        for (int j=i+1; j<CANT; j++) {

            if ( vec[i] > vec[j] ) {
                aux = vec[i];
                vec[i] = vec[j];
                vec[j] = aux;
            }
        }
    }

    for (int i=0; i<5; i++) {
        printf("%d ", vec[i]);
    }

    return 0;
}
 
- Cadenas de caracteres: termina con el elemeno "\0" (ocupa el último espacio del array).
char cadena[50];
fflush(stdin);
scanf("%s", cadena); // corta al ingresar un espacio

    char buffer[64];
    int cantidad;

    printf("Nombre: ");
    //fgets(buffer, 62, stdin);
    fgets(buffer,sizeof(buffer)-2,stdin);

    cantidad = strlen(buffer);

    buffer[cantidad-1] = '\0';

    printf("%s", buffer);

- para comparar cadenas, como no son datos nativos del lenguaje, hay que usar la función strcmp(cadena1, cadena2) si queremos que discrimine entre minúsculas y mayúsculas, o sino sticmp que no es sensible. 
    devuelve 0 si cadena1 == cadena2
    devuelve >0 si cadena1 > cadena2
    devuelve <0 si cadena1 < cadena2

- función strcpy(cadena1,cadena2): el contenido del segundo parámetro se copia en el primero (el primero tiene que ser siempre una variable).

 ***** Clase 7 - prog1 *****
 
 - paralelismos
 - doble criterio
 
 ***** Clase 8 - lab1 *****
  
 - estructura: un tipo de dato definido por el usuario (no es int, char, etc.). 
  Cada columna se llama campo. Hay que definir qué tipo de dato va a contener cada campo (int, char, etc.).
  
 - cómo crear una estructura: antes del main, con la palabra reservada "estruct":
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct datosPersonales {
    char nombre[20];
    char apellido[20];
    char calle[20];
    int numero;
};

int main()
{
    struct datosPersonales agenda;

    strcpy(agenda.nombre, "Juan");
    strcpy(agenda.apellido, "Perez");
    strcpy(agenda.calle, "Mitre");
    agenda.numero = 750;

    printf("El nombre es %s", agenda.nombre);

    return 0;
}

- pedir y mostrar los datos:

    struct datosPersonales agenda;

    printf("Ingrese el nombre: ");
    fflush(stdin);
    gets(agenda.nombre);
    fflush(stdin);
    
    printf("Ingrese el apellido: ");
    gets(agenda.apellido);
    fflush(stdin);
    
    printf("Ingrese la calle: ");
    gets(agenda.calle);
    fflush(stdin);
    
    printf("Ingrese el numero: ");
    scanf("%d", &agenda.numero);
    
    printf("Ingrese el codigo postal: ");
    scanf("%d", &agenda.codigoPostal);

    printf("El nombre es: %s\n", agenda.nombre);
    printf("El apellido es: %s\n", agenda.apellido);
    printf("La cale es: %s\n", agenda.calle);
    printf("El numero es: %d\n", agenda.numero);
    printf("El codigo postal es: %d\n", agenda.codigoPostal);
  
- Para agregarle filas a la estructura declaro adentro de main: struct datosPersonales vecAgenda[3];
    struct datosPersonales vecAgenda[3];

    for (int i=0; i<3; i++) {
    printf("Ingrese el nombre: ");
    fflush(stdin);
    gets(vecAgenda[i].nombre);
    fflush(stdin);

    printf("Ingrese el apellido: ");
    gets(vecAgenda[i].apellido);
    fflush(stdin);

    printf("Ingrese la calle: ");
    gets(vecAgenda[i].calle);
    fflush(stdin);

    printf("Ingrese el numero: ");
    scanf("%d", &vecAgenda[i].numero);

    printf("Ingrese el codigo postal: ");
    scanf("%d", &vecAgenda[i].codigoPostal);

    }

    for (int i=0; i<3; i++) {
    printf("El nombre es: %s\n", vecAgenda[i].nombre);
    printf("El apellido es: %s\n", vecAgenda[i].apellido);
    printf("La cale es: %s\n", vecAgenda[i].calle);
    printf("El numero es: %d\n", vecAgenda[i].numero);
    printf("El codigo postal es: %d\n", vecAgenda[i].codigoPostal);
    }

***** Clase 9 - prog1 *****

- crear 3 funciones: 
1) para inicializar el array (decir que está empty)
2) para mostrar el array
3) para mostrar un lugar libre
opcional 4) para guardar los datos del alta

---tambien: si o si hacer funciones para alta, baja, modificacion y para ordenar

#define CANT_EMP 100

typedef struct
{
    int isEmpty;
    int idEmpleado;
    char nombre[50];
    char apellido[50];
}Empleado;

int main()
{
    Empleado arrayEmpleados[CANT_EMP];
    
    // 1) funcion para inicializar el array de empleados:
    for(int i=0;i<CANT_EMP;i++)
    {
        arrayEmpleados[i].isEmpty=1;
    }

    // 2) funcion para mostrar el array (los lugares ocupados):
    for(int i=0;i<CANT_EMP;i++)
    {
        if(arrayEmpleados[i].isEmpty==0)
        {
            printf("%d %d %s %s", arrayEmpleados[i].isEmpty, arrayEmpleados[i].idEmpleado, arrayEmpleados[i].nombre, arrayEmpleados[i].apellido);
        }
    }

    // 3) funcion para mostrar un lugar libre:
    int indiceLibre;
    for(int i=0;i<CANT_EMP;i++)
    {
        if(arrayEmpleados[i].isEmpty==1)
        {
            indiceLibre=i;
            break;
        }
    }

    // 4) funcion para guardar los datos
    Empleado auxiliar;
    //desde el main llamo a la funcion altaEmpleado para que: 1. busca un lugar libre, 2. pide los datos, 3. los valida, 4. los guarda en la variable definitiva


***** Clase 10 - lab1 *****
\t: tabula
%s.5: muestra los primeros 5 caracteres de un string
%0: tabula un lugar a la izq.

29/4: examen programación
lunes 6 y miércoles 8 de mayo: examen laboratorio

para buscar los empleados de un sector:
for(i=0; i<CANT_SECT; i++){
    printf("%d %s\n", sectores[i].id, sectores[i].descr);
}

printf("Ingrese sector a buscar: ");
scanf("%d", &sectorAux);

for(i=0; i<CANT_SECT; i++){
    for(j=0; j<CANT_EMP; j++){
        if(sectorAux==sectores[i].id && sectores[i].id==emp[j].idSector){
            printf("%d %s %s", emp[j], emp[j].nombre, sectores[i].descr);
        }
    }
}

para ordenar los empleados alfabéticamente:
aEmpleado auxEmp;

for(i=0: i<CANT_EMP-1; i++){
    for(j=0; j<CANT_EMP; j++){
        if(strcmp(emp[i].nombre, emp[j].nombre)>0){ // da mayor a cero si el parametro de la izq es mas grande
            auxEmp=emp[i];
            emp[i]=emp[j];
            emp[j]=auxEmp;
            // como son datos de tipo estructura se copian todos al mismo tiempo (al hacer swap)
        }
    }
}


  
  
  
  
  
  
  
  
  
  
  
  
  
